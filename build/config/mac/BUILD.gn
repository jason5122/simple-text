import("//build/config/mac/mac_sdk.gni")

config("compiler") {
  if (target_cpu == "x64") {
    clang_arch = "x86_64"
  } else if (target_cpu == "x86") {
    clang_arch = "i386"
  } else if (target_cpu == "arm64") {
    clang_arch = target_cpu
  } else {
    assert(false, "unknown target_cpu $target_cpu")
  }
  common_mac_flags = [ "--target=$clang_arch-apple-macos" ]

  asmflags = common_mac_flags
  cflags = common_mac_flags
  ldflags = common_mac_flags
}

config("runtime_library") {
  common_flags = [ "-mmacos-version-min=$mac_deployment_target" ]

  asmflags = common_flags
  cflags = common_flags
  ldflags = common_flags
}

# ARC does not add exception handlers to pure Objective-C code, but does add
# them to Objective-C++ code with the rationale that C++ pervasively adds them
# in for exception safety. However, exceptions are banned in Chromium code for
# C++ and exceptions in Objective-C code are intended to be fatal, so
# -fno-objc-arc-exceptions is specified to disable these unwanted exception handlers.
# -Wobjc-property-assign-on-object-type enables to show warnings when the
# assign is used for a property on an Objective-C object under ARC.
config("enable_arc") {
  common_flags = [
    "-fobjc-arc",
    "-fno-objc-arc-exceptions",
    "-Wobjc-property-assign-on-object-type",
  ]
  cflags_objc = common_flags
  cflags_objcc = common_flags
}
